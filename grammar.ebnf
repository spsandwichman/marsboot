file = module_decl {import_decl} {stmt};

module_decl = 'module' ident ';';

import_decl = 'import' ident string ';';

(* generic comma-separated list *)
list<X> = {X ','} [X];

assignop = 
    | '='
    | '+=' | '-=' | '*=' | '/=' | '%=' | '%%='
    | '&=' | '|=' | '~|=' | '~=' | '<<=' | '>>='
    ;

simple_stmt =
    | ('let' | 'mut' | 'def') list<ident> [':' expr] ['=' expr]
    | expr assignop expr
    | expr
    ;

extern_decl =
    | fnproto ';'
    | ('let' | 'mut') list<ident> ':' expr ';'
    ;

stmt =
    | simple_stmt ';'
    | stmt_block
    | fnproto stmt_block
    | 'if' expr do_block [else]
    | 'while' expr do_block
    | 'switch' expr '{' {case_block} '}'
    | 'when' expr do_block [when_else]
    | 'when ' expr ';' (* like static_assert! *)
    | 'which' expr '{' {case_block} '}'
    | 'for' simple_stmt ';' expr ';' simple_stmt do_block
    | 'for' ('let' | 'mut') ident [':' type] 'in' expr do_block
    | 'extern' [expr] (extern_decl | '{' {extern_decl} '}')
    | 'defer' stmt
    | 'break' [ident] ';'
    | 'continue' [ident] ';'
    | 'fallthrough' [expr [',' [expr]]] ';'
    | ident ':' stmt
    ;

else =
    | 'else' do_block
    | 'else' 'if' expr do_block else
    ;

when_else =
    | 'else' do_block
    | 'else' 'when' expr do_block else
    ;

do_block =
    | stmt_block
    | 'do' stmt
    ;

stmt_block = "{" {stmt} "}";

case_block = 'case' list<expr> ':' {stmt};

(* in levels of precedence *)
binop =
    | '<<' | '>>'
    | '&'
    | '|' | '~' | '~|'
    | '*' | '/' | '%' | '%%'
    | '+' | '-'
    | '==' | '!=' | '<' | '>' | '<=' | '>=' | '..<' | '..='
    | 'in'
    | '&&' 
    | '||'
    ;

fnproto = 
    | 'fn' [ident] '(' list<item> ')' ['->' (expr | '(' list<item> ')'))]
    (* | 'fn' [ident] '(' list<expr> ')' ['->' (expr | '(' list<expr> ')'))] *)
    (* ^^^ TODO *)
    ;

(* types and expressions are unified *)

case_expr = 'case' list<expr> ':' expr;

expr =
    | ('if' | 'when') expr 'do' expr 'else' expr
    | ('switch' | 'which') expr '{' list<case_expr> '}'
    | expr binop expr
    | unary_expr
    ;

unop = '&' | '!' | '?' | '~' | '-' | '+' | 'sizeof' | 'alignof' | 'typeof' | 'offsetof';

unary_expr =
    | ('cast' | 'bitcast') '(' expr ')' unary_expr
    | unop unary_expr
    | atom_expr
    ;

atom_terminal = 
    | '(' expr ')'
    | ident | '_'
    | integer | float | string
    | 'true' | 'false' | 'null'
    | 'i8' | 'i16' | 'i32' | 'i64' | 'int'
    | 'u8' | 'u16' | 'u32' | 'u64' | 'uint'
    | 'f16' | 'f32' | 'f64' | 'float'
    | 'bool'
    | 'dyn'
    | 'typeid'

    | '.' '{' list<compound_item> '}'
    | '.' ident

    | ('^' | '[' [ '^' ] ']') ('let' | 'mut') [atom_terminal]
    | '[' expr ']' atom_terminal
    | 'distinct' atom_terminal
    | 'struct' '{' list<item> '}'
    | 'union' '{' list<item> '}'
    | 'enum' expr '{' list<variant> '}'
    | fnproto [stmt_block]
    ;

atom_expr = 
    | atom_terminal
    | atom_expr '::' ident
    | atom_expr '.' ident
    | atom_expr '.' '{' list<compound_item> '}'
    | atom_expr '^'
    | atom_expr '[' expr ']'
    | atom_expr '[' [expr] ':' [expr] ']'
    | atom_expr '(' list<expr> ')'
    ;

variant = ident ['=' expr];
item = ident [',' ident] ':' expr;
compound_item = expr | '[' expr ']' '=' expr | '.' ident '=' expr;